allprojects {
    apply plugin: 'jacoco'
    repositories {
        jcenter()
        mavenCentral()
    }
    apply plugin: 'java'
    version = "1.0";
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}
ext {
	awssdkVersion = '2.5.25'
	log4jVersion = '2.11.2'
    junit5Version= '5.3.2'
    gsonVersion = '2.8.5'
    mockitoVersion = '2.25.0'
    grpcVersion = '1.21.0'
    protoVersion = '3.8.0'
}
subprojects {
    dependencies {
        implementation 'com.google.guava:guava:27.0.1-jre'
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        testImplementation "org.junit.jupiter:junit-jupiter-params:${junit5Version}"
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junit5Version}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit5Version}"
        testCompile "org.mockito:mockito-core:${mockitoVersion}"
        testImplementation "org.mockito:mockito-inline:${mockitoVersion}"
        implementation "org.apache.logging.log4j:log4j-1.2-api:${log4jVersion}"
        implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
        implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    }
    test {
        useJUnitPlatform()

        testLogging {
            showStandardStreams true
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }
        environment "RUN_ENV", "development"
        maxHeapSize = '8196m' 
        minHeapSize = "128m"

    }    
}
task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude:  [
            ])
        })
    }

    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}